import TelegramBot from 'node-telegram-bot-api';
import { UserLanguageEnum } from 'src/helper';
import { Payment } from 'src/bot-vice-city/payment/payment.entity';
import { PaymentMethod } from 'src/bot-vice-city/paymentMethod/paymentMethod.entity';
import { Promocode } from 'src/bot-vice-city/promocode/promocode.entity';
import { SubscriptionPlan } from 'src/bot-vice-city/subscriptionPlan/subscriptionPlan.entity';
import { User } from 'src/bot-vice-city/user/user.entity';

export const sendGiveUserAccessKeyboard = async (
  id: number | string,
  bot: TelegramBot,
  user: User,
  customer: User,
  payment: Payment,
  plan: SubscriptionPlan,
  paymentMethod: PaymentMethod,
  promocode: Promocode,
) => {
  const text = getMainText(
    user.language,
    customer,
    payment,
    plan,
    paymentMethod,
    promocode,
  );

  await bot.forwardMessage(
    user.chat_id,
    customer.chat_id,
    Number(payment.screenshot_message_id),
  );
  return await bot.sendMessage(id, text, {
    parse_mode: 'HTML',
    reply_markup: {
      remove_keyboard: true,
      inline_keyboard: [
        [
          {
            text:
              user.language === UserLanguageEnum.EN
                ? '‚úÖ Confirm user payment'
                : user.language === UserLanguageEnum.UA
                  ? '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
                  : '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            callback_data: 'GiveUserAccessConfirm;' + payment.id,
          },
          {
            text:
              user.language === UserLanguageEnum.EN
                ? '‚ùå Decline user payment'
                : user.language === UserLanguageEnum.UA
                  ? '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
                  : '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            callback_data: 'GiveUserAccessDecline;' + payment.id,
          },
        ],
        // [
        //   {
        //     text:
        //       user.language === UserLanguageEnum.EN
        //         ? 'üö´ Cancel'
        //         : user.language === UserLanguageEnum.UA
        //           ? 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏'
        //           : 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å',
        //     callback_data: callback_data + 'Europe/Rome',
        //   },
        // ],
      ],
    },
  });
};

const getMainText = (
  language: UserLanguageEnum,
  customer: User,
  payment: Payment,
  plan: SubscriptionPlan,
  paymentMethod: PaymentMethod,
  promocode: Promocode,
) => {
  switch (language) {
    case UserLanguageEnum.EN:
      return `‚ÄºÔ∏è New customer
<b>nickname</b>: @${customer.name}
<b>subscription plan</b>: ${plan[`name${language}`]}
<b>payment amount</b>: ${payment.amount} ${payment.currency}
<b>promocode</b>: ${promocode ? promocode.name : 'no promocode'}
<b>payment method</b>: ${paymentMethod.name}
<b>payment address</b>: ${payment.address}
<b>payment date</b>: ${payment.created_date}`;

    case UserLanguageEnum.UA:
      return `‚ÄºÔ∏è –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
<b>nickname</b>: @${customer.name}
<b>–ø–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏</b>: ${plan[`name${language}`]}
<b>—Å—É–º–∞ –æ–ø–ª–∞—Ç–∏</b>: ${payment.amount} ${payment.currency}
<b>–ø—Ä–æ–º–æ–∫–æ–¥</b>: ${promocode ? promocode.name : '–±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—É'}
<b>—Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏</b>: ${paymentMethod.name}
<b>–ø–ª–∞—Ç—ñ–∂–Ω–∞ –∞–¥—Ä–µ—Å–∞</b>: ${payment.address}
<b>–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏</b>: ${payment.created_date}`;

    case UserLanguageEnum.RU:
      return `‚ÄºÔ∏è –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
<b>nickname</b>: @${customer.name}
<b>–ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏</b>: ${plan[`name${language}`]}
<b>—Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã</b>: ${payment.amount} ${payment.currency}
<b>–ø—Ä–æ–º–æ–∫–æ–¥</b>: ${promocode ? promocode.name : '–Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞'}
<b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: ${paymentMethod.name}
<b>–ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–¥—Ä–µ—Å</b>: ${payment.address}
<b>–¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞</b>: ${payment.created_date}`;
  }
};
