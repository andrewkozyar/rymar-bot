import TelegramBot from 'node-telegram-bot-api';
import { PaymentStatusEnum, UserLanguageEnum } from 'src/helper';
import { getDateWithoutHours, getDaysDifference } from 'src/helper/date';
import { Payment } from 'src/bot-vice-city/payment/payment.entity';
import { PaymentService } from 'src/bot-vice-city/payment/payment.service';
import { User } from 'src/bot-vice-city/user/user.entity';

export const sendMySubscriptionKeyboard = async (
  id: number,
  bot: TelegramBot,
  user: User,
  paymentService: PaymentService,
) => {
  const lastPayment = await paymentService.findOne({
    user_id: user.id,
    statuses: [PaymentStatusEnum.Success],
  });

  let text;

  const inline_keyboard = [];

  if (lastPayment) {
    const continueDays = getDaysDifference(
      new Date(),
      lastPayment.expired_date,
    );
    const expiredDate = getDateWithoutHours(
      lastPayment.expired_date,
    ).toDateString();

    text = getPlanInfo(user.language, lastPayment, continueDays, expiredDate);

    inline_keyboard.push([
      {
        text:
          user.language === UserLanguageEnum.EN
            ? 'Continue the subscription at the old price'
            : user.language === UserLanguageEnum.UA
              ? '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ —Å—Ç–∞—Ä–æ—é —Ü—ñ–Ω–æ—é'
              : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ',
        callback_data: 'ContinueSubscription',
      },
    ]);
  } else {
    text =
      user.language === UserLanguageEnum.EN
        ? 'You do not have an active subscription'
        : user.language === UserLanguageEnum.UA
          ? '–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏'
          : '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏';
  }

  inline_keyboard.push(
    [
      {
        text: `üíµ ${
          user.language === UserLanguageEnum.EN
            ? 'List of transactions'
            : user.language === UserLanguageEnum.UA
              ? '–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π'
              : '–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
        }`,
        callback_data: 'ListOfTransactions',
      },
    ],
    [
      {
        text:
          user.language === UserLanguageEnum.EN
            ? 'üóíÔ∏è Subscription plans'
            : user.language === UserLanguageEnum.UA
              ? 'üóíÔ∏è –ü–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫'
              : 'üóíÔ∏è –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫',
        callback_data: 'SendSubscriptionPlanKeyboard',
      },
    ],
  );

  await bot.sendMessage(id, text, {
    parse_mode: 'HTML',
    reply_markup: {
      remove_keyboard: true,
      inline_keyboard,
    },
  });
};

export const editMySubscriptionKeyboard = async (
  chat_id: number,
  message_id: number,
  bot: TelegramBot,
  user: User,
  paymentService: PaymentService,
) => {
  const lastPayment = await paymentService.findOne({
    user_id: user.id,
    statuses: [PaymentStatusEnum.Success],
  });

  let text;

  const inline_keyboard = [];

  if (lastPayment) {
    const continueDays = getDaysDifference(
      new Date(),
      lastPayment.expired_date,
    );
    const expiredDate = getDateWithoutHours(
      lastPayment.expired_date,
    ).toDateString();

    text = getPlanInfo(user.language, lastPayment, continueDays, expiredDate);

    inline_keyboard.push([
      {
        text:
          user.language === UserLanguageEnum.EN
            ? 'Continue the subscription at the old price'
            : user.language === UserLanguageEnum.UA
              ? '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ —Å—Ç–∞—Ä–æ—é —Ü—ñ–Ω–æ—é'
              : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ',
        callback_data: 'ContinueSubscription',
      },
    ]);
  } else {
    text =
      user.language === UserLanguageEnum.EN
        ? 'You do not have an active subscription'
        : user.language === UserLanguageEnum.UA
          ? '–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏'
          : '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏';
  }

  inline_keyboard.push(
    [
      {
        text: `üíµ ${
          user.language === UserLanguageEnum.EN
            ? 'List of transactions'
            : user.language === UserLanguageEnum.UA
              ? '–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π'
              : '–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
        }`,
        callback_data: 'ListOfTransactions',
      },
    ],
    [
      {
        text:
          user.language === UserLanguageEnum.EN
            ? 'üóíÔ∏è Subscription plans'
            : user.language === UserLanguageEnum.UA
              ? 'üóíÔ∏è –ü–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫'
              : 'üóíÔ∏è –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫',
        callback_data: 'SendSubscriptionPlanKeyboard',
      },
    ],
  );

  await bot.editMessageText(text, {
    chat_id,
    message_id,
    parse_mode: 'HTML',
  });

  await bot.editMessageReplyMarkup(
    {
      inline_keyboard,
    },
    {
      chat_id,
      message_id,
    },
  );
};

const getPlanInfo = (
  language: UserLanguageEnum,
  lastPayment: Payment,
  continueDays: number,
  expiredDate: string,
) => {
  switch (language) {
    case UserLanguageEnum.EN:
      return `üìÉ Your subscription plan is ${
        lastPayment.subscription_plan[`name${language}`]
      }

- <b>Start date</b>: ${lastPayment.created_date.toDateString()}
- <b>Expired date</b>: ${expiredDate}
- <b>Days left</b>: ${continueDays}
      
üéÅ You have the option to renew your subscription at the old price`;

    case UserLanguageEnum.UA:
      return `üìÉ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞: ${
        lastPayment.subscription_plan[`name${language}`]
      }

- <b>–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É</b>: ${lastPayment.created_date.toDateString()}
- <b>–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è</b>: ${expiredDate}
- <b>–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤</b>: ${continueDays}
      
üéÅ –£ –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ —Å—Ç–∞—Ä–æ—é —Ü—ñ–Ω–æ—é`;

    case UserLanguageEnum.RU:
      return `üìÉ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: ${
        lastPayment.subscription_plan[`name${language}`]
      }

- <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</b>: ${lastPayment.created_date.toDateString()}
- <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>: ${expiredDate}
- <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π</b>: ${continueDays}
      
üéÅ –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ`;
  }
};
