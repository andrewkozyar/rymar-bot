import TelegramBot from 'node-telegram-bot-api';
import { ChannelService } from '../../chanel/channel.service';
import {
  BotEnum,
  CurrencyEnum,
  LaterTypeEnum,
  LogTypeEnum,
  PayDataInterface,
  PaymentStatusEnum,
  UserLanguageEnum,
  getFiatAmount,
} from 'src/helper';
import { PaymentService } from '../../payment/payment.service';
import { SubscriptionPlanService } from '../../subscriptionPlan/subscriptionPlan.service';
import { UserService } from '../../user/user.service';
import { sendAccountKeyboard } from '../keyboards/account.keyboards';
import { sendLanguageKeyboard } from '../keyboards/language.keyboards';
import { sendMenuKeyboard } from '../keyboards/menu.keyboards';
import { sendMySubscriptionKeyboard } from '../keyboards/my-subscription.keyboards';
import { sendSubscriptionPlanDetailsKeyboard } from '../keyboards/subscription-plan-details.keyboards';
import { sendSubscriptionPlanKeyboard } from '../keyboards/subscription-plans.keyboards';
import { sendTransactionsKeyboard } from '../keyboards/transactions.keyboards';
import { RedisService } from 'src/redis/redis.service';
import { sendAdminPanelKeyboard } from '../keyboards/adminPanel.keyboards';
import { PromocodeService } from '../../promocode/promocode.service';
import { editPromocodesKeyboard } from '../keyboards/promocodes.keyboards';
import { sendSubscriptionPlanAdminDetailsKeyboard } from '../keyboards/subscription-plan-admin-details.keyboards';
import { UpdateDto as UpdatePlanDto } from '../../subscriptionPlan/dto';
import { editIsPublishedKeyboard } from '../keyboards/is-published.keyboards';
import { sendTextWithCancelKeyboard } from '../keyboards/cancel.keyboards';
import { sendPromocodeAdminDetailsKeyboard } from '../keyboards/promocode-admin-details.keyboards';
import { UpdateDto as UpdatePromocodeDto } from '../../promocode/dto';
import { editPaymentMethodsKeyboard } from '../keyboards/payment-methods.keyboards';
import { PaymentMethodService } from '../../paymentMethod/paymentMethod.service';
import { sendPaymentMethodAdminDetailsKeyboard } from '../keyboards/payment-method-admin-details.keyboards';
import { UpdateDto as UpdatePaymentMethodDto } from '../../paymentMethod/dto';
import { editPaymentMethodDetailsKeyboard } from '../keyboards/payment-method-details.keyboards';
import { sendGiveUserAccessKeyboard } from '../keyboards/give-user-access.keyboards';
import { editCurrencyKeyboard } from '../keyboards/currency.keyboards';
import { ConversionRateService } from 'src/conversionRate/conversionRate.service';
import { LogService } from 'src/log/log.service';
import { getDaysDifference } from 'src/helper/date';
import { notifyUserAboutPlan } from '../helpers/notifyUserAboutPlan';
import { sendEmail } from 'src/helper/mailer';
import { editSubscriptionPlanChannelsKeyboard } from '../keyboards/subscriptionPlanChannels.keyboards';

export const actionCallbackQuery = async (
  bot: TelegramBot,
  userService: UserService,
  redisService: RedisService,
  planService: SubscriptionPlanService,
  promocodeService: PromocodeService,
  paymentService: PaymentService,
  channelService: ChannelService,
  paymentMethodService: PaymentMethodService,
  rateService: ConversionRateService,
  logService: LogService,
) => {
  return bot.on('callback_query', async (query) => {
    try {
      const [key, data] = query.data.split(';');
      const user = await userService.findOne({
        chat_id: query.message.chat.id,
      });

      if (user) {
        await redisService.delete(`ChangeEmail-${user.id}`);
      }

      if (!user) {
        return;
      }

      if (!user.email) {
        await redisService.clearData(user.id);

        await redisService.add(`ChangeEmail-${user.id}`, 'waiting');

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? 'üñäÔ∏è Enter your email address!'
            : user.language === UserLanguageEnum.UA
              ? 'üñäÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏!'
              : 'üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã!',
          null,
          user,
          true,
        );
      }

      if (key === 'ChangeLanguageMenu') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–Ω–∞–∂–∞–ª "–∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendLanguageKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          true,
        );
      }

      if (key === 'ChangeLanguage') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–∏–∑–º–µ–Ω–∏–ª —è–∑—ã–∫ –Ω–∞ ${data}`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        const updatedUser = await userService.update(user.id, {
          language: data as unknown as UserLanguageEnum,
        });
        await sendMenuKeyboard(
          query.message.chat.id,
          bot,
          updatedUser.language === UserLanguageEnum.EN
            ? '‚úÖ Language is changed'
            : updatedUser.language === UserLanguageEnum.UA
              ? '‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ'
              : '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω',
          updatedUser.language,
        );
        return await sendAccountKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          updatedUser,
          true,
        );
      }

      if (key === 'BackToAccount') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–∑–∞—à–µ–ª –Ω–∞ "–º–æ–π –∞–∫–∞—É–Ω—Ç"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendAccountKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user,
          true,
        );
      }

      if (key === 'ChangeEmailMessage') {
        await redisService.clearData(user.id);

        await redisService.add(`ChangeEmail-${user.id}`, 'waiting');

        await logService.create({
          user_id: user.id,
          info: `–Ω–∞–∂–∞–ª –Ω–∞ "–∏–∑–º–µ–Ω–∏—Ç—å –µ–º–µ–π–ª"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? 'üñäÔ∏è Enter your email address!'
            : user.language === UserLanguageEnum.UA
              ? 'üñäÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏!'
              : 'üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã!',
          'BackToAccount',
          user,
          true,
        );
      }

      if (key === 'ChooseSubscriptionPlan') {
        const redisData = await redisService.get(
          `BuySubscriptionPlan-${user.id}`,
        );

        const payData: PayDataInterface = JSON.parse(redisData);

        if (payData?.addressMessageId) {
          await bot.deleteMessage(
            query.message.chat.id,
            payData.addressMessageId,
          );
          await redisService.add(
            `BuySubscriptionPlan-${user.id}`,
            JSON.stringify({
              ...payData,
              addressMessageId: null,
            }),
          );
        }

        const plan = await planService.findOne({ id: data, withDeleted: true });

        await logService.create({
          user_id: user.id,
          info: `–∑–∞—à–µ–ª –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${plan.nameRU}"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        if (payData?.promocode_id && payData?.subscription_plan_id === data) {
          const promocode = await promocodeService.findOne({
            id: payData.promocode_id,
          });

          return await sendSubscriptionPlanDetailsKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            plan,
            redisService,
            user,
            payData,
            promocode,
            true,
          );
        }

        await redisService.clearData(user.id);

        const planPayData: PayDataInterface = {
          amount: plan.price,
          subscription_plan_id: plan.id,
          promocode_id: null,
          newPrice: null,
          isContinue: false,
        };

        return await sendSubscriptionPlanDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          plan,
          redisService,
          user,
          planPayData,
          null,
          true,
        );
      }

      if (key === 'ContinueSubscription') {
        const lastPayment = await paymentService.findOne({
          user_id: user.id,
          statuses: [PaymentStatusEnum.Success],
        });

        const continueDays = getDaysDifference(
          new Date(),
          lastPayment.expired_date,
        );

        const payData: PayDataInterface = {
          amount: lastPayment.full_price_usd,
          subscription_plan_id: lastPayment.subscription_plan_id,
          newPrice: lastPayment.price_usd,
          isContinue: true,
          promocode_id: null,
          continueDays,
          isFromNotification: data === 'notification',
        };

        if (lastPayment.promocode_id) {
          const promocode = await promocodeService.findOne({
            id: lastPayment.promocode_id,
          });

          const userPayments = await paymentService.getPayments({
            user_id: user.id,
            statuses: [
              PaymentStatusEnum.End,
              PaymentStatusEnum.Success,
              PaymentStatusEnum.Pending,
            ],
          });

          if (
            !promocode.is_multiple &&
            userPayments.payments.find((p) => p.promocode_id === promocode.id)
          ) {
            payData.newPrice = lastPayment.full_price_usd;
          }
        }

        const plan = await planService.findOne({
          id: payData.subscription_plan_id,
          withDeleted: true,
        });

        await logService.create({
          user_id: user.id,
          info: `‚ÄºÔ∏è –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${plan.nameRU}"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        if (payData.isFromNotification) {
          return await sendSubscriptionPlanDetailsKeyboard(
            query.message.chat.id,
            null,
            bot,
            plan,
            redisService,
            user,
            payData,
          );
        }

        return await sendSubscriptionPlanDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          plan,
          redisService,
          user,
          payData,
          null,
          true,
        );
      }

      if (key === 'AdminChooseSubscriptionPlan') {
        await redisService.clearData(user.id);

        const plan = await planService.findOne({ id: data });

        if (!plan) {
          return;
        }

        return await sendSubscriptionPlanAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          plan,
          redisService,
          user,
          true,
        );
      }

      if (key === 'AdminPromocodeDetails') {
        await redisService.clearData(user.id);

        const promocode = await promocodeService.findOne({ id: data });

        return await sendPromocodeAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocode,
          redisService,
          user,
          true,
        );
      }

      if (key === 'SendSubscriptionPlanKeyboard') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–Ω–∞–∂–∞–ª –Ω–∞ "–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendSubscriptionPlanKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          planService,
          false,
          user,
          true,
        );
      }

      if (key === 'SendSubscriptionPlanAdminKeyboard') {
        await redisService.clearData(user.id);

        return await sendSubscriptionPlanKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          planService,
          true,
          user,
          true,
        );
      }

      if (key === 'Promocode') {
        await redisService.clearData(user.id);

        await redisService.add(`Promocode-${user.id}`, data);

        await logService.create({
          user_id: user.id,
          info: `‚ÄºÔ∏è –Ω–∞–∂–∞–ª –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? 'üñäÔ∏è Enter your promo code!'
            : user.language === UserLanguageEnum.UA
              ? 'üñäÔ∏è –í–≤–µ–¥—ñ—Ç—å promo code!'
              : 'üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ promo code!',
          `ChooseSubscriptionPlan;${data}`,
          user,
          true,
        );
      }

      if (key === 'BuySubscriptionPlan') {
        const redisData = await redisService.get(
          `BuySubscriptionPlan-${user.id}`,
        );

        const payData: PayDataInterface = JSON.parse(redisData);

        const todaysLogs = await logService.getOne(user.id);

        if (!todaysLogs.info.includes('–Ω–∞–∂–∞–ª –Ω–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å')) {
          setTimeout(
            () => notifyUserAboutPlan(user, bot, paymentService, logService),
            1000 * 60 * 60 * 5,
          );
          setTimeout(
            () => notifyUserAboutPlan(user, bot, paymentService, logService),
            1000 * 60 * 60 * 24,
          );
        }

        await logService.create({
          user_id: user.id,
          info: `‚ÄºÔ∏è –Ω–∞–∂–∞–ª –Ω–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        if (payData?.addressMessageId) {
          await bot.deleteMessage(
            query.message.chat.id,
            payData.addressMessageId,
          );
          await redisService.add(
            `BuySubscriptionPlan-${user.id}`,
            JSON.stringify({
              ...payData,
              addressMessageId: null,
            }),
          );
        }

        return await editPaymentMethodsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethodService,
          user,
          false,
          payData?.isContinue,
          data,
        );
      }

      if (key === 'PayBy') {
        const paymentMethod = await paymentMethodService.findOne({ id: data });

        const redisData = await redisService.get(
          `BuySubscriptionPlan-${user.id}`,
        );

        await logService.create({
          user_id: user.id,
          info: `‚ÄºÔ∏è –≤—ã–±—Ä–∞–ª –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã "${paymentMethod.name}"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        const payData: PayDataInterface = JSON.parse(redisData);

        if (payData?.addressMessageId) {
          await bot.deleteMessage(
            query.message.chat.id,
            payData.addressMessageId,
          );
          await redisService.add(
            `BuySubscriptionPlan-${user.id}`,
            JSON.stringify({
              ...payData,
              addressMessageId: null,
            }),
          );
        }

        if (!payData?.subscription_plan_id) {
          return await sendSubscriptionPlanKeyboard(
            query.message.chat.id,
            null,
            bot,
            planService,
            false,
            user,
          );
        }

        const plan = await planService.findOne({
          id: payData.subscription_plan_id,
        });

        const rateToUsd = await rateService.get();

        const addressMessage = await editPaymentMethodDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethod,
          plan,
          user,
          getFiatAmount(rateToUsd[paymentMethod.currency] * plan.price),
          getFiatAmount(rateToUsd[paymentMethod.currency] * payData.newPrice),
        );

        await redisService.add(
          `BuySubscriptionPlan-${user.id}`,
          JSON.stringify({
            ...payData,
            addressMessageId: addressMessage.message_id,
          }),
        );

        return;
      }

      if (key === 'UserPaid') {
        const paymentMethod = await paymentMethodService.findOne({ id: data });

        const redisData = await redisService.get(
          `BuySubscriptionPlan-${user.id}`,
        );

        await logService.create({
          user_id: user.id,
          info: `‚ÄºÔ∏è –Ω–∞–∂–∞–ª –Ω–∞ "—è –æ–ø–ª–∞—Ç–∏–ª"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        const payData: PayDataInterface = JSON.parse(redisData);

        if (payData?.addressMessageId) {
          await bot.deleteMessage(
            query.message.chat.id,
            payData.addressMessageId,
          );
          await redisService.add(
            `BuySubscriptionPlan-${user.id}`,
            JSON.stringify({
              ...payData,
              addressMessageId: null,
              payment_method_id: paymentMethod.id,
            }),
          );
        } else {
          await redisService.add(
            `BuySubscriptionPlan-${user.id}`,
            JSON.stringify({
              ...payData,
              payment_method_id: paymentMethod.id,
            }),
          );
        }

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? 'Please send a screenshot of the payment! üì±'
            : user.language === UserLanguageEnum.UA
              ? '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω –∑ –æ–ø–ª–∞—Ç–æ—é! üì±'
              : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å –æ–ø–ª–∞—Ç–æ–π! üì±',
          'PayBy;' + data,
          user,
          true,
        );
      }

      if (key === 'ListOfTransactions') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–Ω–∞–∂–∞–ª –Ω–∞ "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendTransactionsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user,
          paymentService,
          false,
          user.language,
          true,
        );
      }

      if (key === 'MySubscription') {
        await redisService.clearData(user.id);

        await logService.create({
          user_id: user.id,
          info: `–Ω–∞–∂–∞–ª –Ω–∞ "–º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"`,
          type: LogTypeEnum.USER,
          bot: BotEnum.HESOYAM,
        });

        return await sendMySubscriptionKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user,
          paymentService,
          true,
        );
      }

      if (key === 'AdminPanel') {
        await redisService.clearData(user.id);

        return await sendAdminPanelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user,
          true,
        );
      }

      if (key === 'AdminPromocodes') {
        await redisService.clearData(user.id);

        return await editPromocodesKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocodeService,
          user,
        );
      }

      if (key === 'AdminUserTransactions') {
        await redisService.clearData(user.id);

        await redisService.add(`AdminUserTransactions-${user.id}`, 'waiting');

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? `üñäÔ∏è Enter user nickname!`
            : user.language === UserLanguageEnum.UA
              ? `üñäÔ∏è –í–≤–µ–¥—ñ—Ç—å nickname –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!`
              : `üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ nickname –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`,
          `AdminPanel`,
          user,
          true,
        );
      }

      if (key === 'UsersStep') {
        await redisService.clearData(user.id);

        await redisService.add(`UsersStep-${user.id}`, 'waiting');

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? `üñäÔ∏è Enter user nickname!`
            : user.language === UserLanguageEnum.UA
              ? `üñäÔ∏è –í–≤–µ–¥—ñ—Ç—å nickname –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!`
              : `üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ nickname –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`,
          `AdminPanel`,
          user,
          true,
        );
      }

      if (key === 'UsersList') {
        await redisService.clearData(user.id);

        const users = await userService.getUsers({
          all: true,
          orderBy: 'name',
        });

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          users.users.map((user) => `@${user.name}`).join('\n'),
          `AdminPanel`,
          user,
          true,
        );
      }

      if (key === 'EditSubscriptionPlanAdmin') {
        const redisData = await redisService.get(
          `EditSubscriptionPlanAdmin-${user.id}`,
        );

        await redisService.clearData(user.id);

        const planData: UpdatePlanDto = JSON.parse(redisData);

        planData[data] = null;
        planData.field = data;

        await redisService.add(
          `EditSubscriptionPlanAdmin-${user.id}`,
          JSON.stringify(planData),
        );

        if (data === 'channels') {
          const plan = await planService.findOne({ id: planData.id });

          return await editSubscriptionPlanChannelsKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            plan,
            channelService,
            user,
          );
        }

        if (data === 'is_published') {
          return await editIsPublishedKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            'SubscriptionPlanIsPublished;',
            `AdminChooseSubscriptionPlan;${planData.id}`,
            user,
          );
        }

        if (['price', 'months_count'].includes(data)) {
          return await sendTextWithCancelKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            user.language === UserLanguageEnum.EN
              ? `Enter the new ${
                  data === 'months_count' ? 'number of months' : data
                } for the subscription plan! Should be integer.`
              : user.language === UserLanguageEnum.UA
                ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ${
                    data === 'months_count' ? 'number of months' : data
                  } –¥–ª—è –ø–ª–∞–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏! –ú–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.`
                : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${
                    data === 'months_count' ? 'number of months' : data
                  } –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.`,
            `AdminChooseSubscriptionPlan;${planData.id}`,
            user,
            true,
          );
        }

        if (
          ['descriptionEN', 'descriptionUA', 'descriptionRU'].includes(data)
        ) {
          return await sendTextWithCancelKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            user.language === UserLanguageEnum.EN
              ? `Enter the new ${data} for the subscription plan! If there includes price write it not as number but as {{price}}. Customers are required to receive the correct price after using the promo code.`
              : user.language === UserLanguageEnum.UA
                ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ${data} –¥–ª—è –ø–ª–∞–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏! –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ —Ü—ñ–Ω–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —ó—ó –Ω–µ —á–∏—Å–ª–æ, –∞ {{price}}. –ü–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É.`
                : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${data} –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏! –ï—Å–ª–∏ —Ç–∞–º —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ –Ω–µ —á–∏—Å–ª–æ, –∞ {{price}}. –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.`,
            `AdminChooseSubscriptionPlan;${planData.id}`,
            user,
            true,
          );
        }

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? `Enter the new ${data} for the subscription plan!`
            : user.language === UserLanguageEnum.UA
              ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ${data} –¥–ª—è –ø–ª–∞–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏!`
              : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${data} –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏!`,
          `AdminChooseSubscriptionPlan;${planData.id}`,
          user,
          true,
        );
      }

      if (key === 'SubscriptionPlanIsPublished') {
        const redisData = await redisService.get(
          `EditSubscriptionPlanAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const planData: UpdatePlanDto = JSON.parse(redisData);

        const plan = await planService.update({
          ...planData,
          is_published: data === 'true',
        });

        return await sendSubscriptionPlanAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          plan,
          redisService,
          user,
          true,
        );
      }

      if (key === 'AdminDeleteSubscriptionPlan') {
        const redisData = await redisService.get(
          `EditSubscriptionPlanAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const planData: UpdatePlanDto = JSON.parse(redisData);

        await planService.remove(planData.id);

        return await sendSubscriptionPlanKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          planService,
          true,
          user,
          true,
        );
      }

      if (key === 'NewSubscriptionPlan') {
        await redisService.clearData(user.id);

        const plan = await planService.create();

        return await sendSubscriptionPlanAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          plan,
          redisService,
          user,
          true,
        );
      }

      if (key === 'EditPromocodeAdmin') {
        const redisData = await redisService.get(
          `EditPromocodeAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const promocodeData: UpdatePromocodeDto = JSON.parse(redisData);

        promocodeData[data] = null;
        promocodeData.field = data;

        await redisService.add(
          `EditPromocodeAdmin-${user.id}`,
          JSON.stringify(promocodeData),
        );

        if (data === 'is_published') {
          return await editIsPublishedKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            'PromocodeIsPublished;',
            `AdminPromocodeDetails;${promocodeData.id}`,
            user,
          );
        }

        if (data === 'is_multiple') {
          return await editIsPublishedKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            'PromocodeIsMultiple;',
            `AdminPromocodeDetails;${promocodeData.id}`,
            user,
            true,
          );
        }

        if (data === 'sale_percent') {
          return await sendTextWithCancelKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            user.language === UserLanguageEnum.EN
              ? `Enter a new percentage of the discount for the promo code! Must be a number.`
              : user.language === UserLanguageEnum.UA
                ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—É! –ú–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.`
                : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.`,
            `AdminPromocodeDetails;${promocodeData.id}`,
            user,
            true,
          );
        }

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? `Enter the new ${data} for the promo code!`
            : user.language === UserLanguageEnum.UA
              ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ${data} –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!`
              : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${data} –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!`,
          `AdminPromocodeDetails;${promocodeData.id}`,
          user,
          true,
        );
      }

      if (key === 'PromocodeIsPublished') {
        const redisData = await redisService.get(
          `EditPromocodeAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const promocodeData: UpdatePromocodeDto = JSON.parse(redisData);

        const promocode = await promocodeService.update({
          ...promocodeData,
          is_published: data === 'true',
        });

        return await sendPromocodeAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocode,
          redisService,
          user,
          true,
        );
      }

      if (key === 'PromocodeIsMultiple') {
        const redisData = await redisService.get(
          `EditPromocodeAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const promocodeData: UpdatePromocodeDto = JSON.parse(redisData);

        const promocode = await promocodeService.update({
          ...promocodeData,
          is_multiple: data === 'true',
        });

        return await sendPromocodeAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocode,
          redisService,
          user,
          true,
        );
      }

      if (key === 'AdminDeletePromocode') {
        const redisData = await redisService.get(
          `EditPromocodeAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const promocodeData: UpdatePromocodeDto = JSON.parse(redisData);

        await promocodeService.remove(promocodeData.id);

        return await editPromocodesKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocodeService,
          user,
        );
      }

      if (key === 'NewPromocode') {
        await redisService.clearData(user.id);

        const promocode = await promocodeService.create();

        return await sendPromocodeAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          promocode,
          redisService,
          user,
          true,
        );
      }

      if (key === 'AdminPaymentMethods') {
        await redisService.clearData(user.id);

        return await editPaymentMethodsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethodService,
          user,
          true,
          false,
        );
      }

      if (key === 'AdminPaymentMethodDetails') {
        await redisService.clearData(user.id);

        const paymentMethod = await paymentMethodService.findOne({ id: data });

        return await sendPaymentMethodAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethod,
          redisService,
          user,
          true,
        );
      }

      if (key === 'NewPaymentMethod') {
        await redisService.clearData(user.id);

        const paymentMethod = await paymentMethodService.create();

        return await sendPaymentMethodAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethod,
          redisService,
          user,
          true,
        );
      }

      if (key === 'EditPaymentMethodAdmin') {
        const redisData = await redisService.get(
          `EditPaymentMethodAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const paymentMethodData: UpdatePaymentMethodDto = JSON.parse(redisData);

        paymentMethodData[data] = null;
        paymentMethodData.field = data;

        await redisService.add(
          `EditPaymentMethodAdmin-${user.id}`,
          JSON.stringify(paymentMethodData),
        );

        if (data === 'is_published') {
          return await editIsPublishedKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            'PaymentMethodIsPublished;',
            `AdminPaymentMethodDetails;${paymentMethodData.id}`,
            user,
          );
        }

        if (data === 'currency') {
          const rateToUsd = await rateService.get();

          return await editCurrencyKeyboard(
            query.message.chat.id,
            query.message.message_id,
            bot,
            'PaymentMethodCurrency;',
            `AdminPaymentMethodDetails;${paymentMethodData.id}`,
            user,
            rateToUsd,
          );
        }

        return await sendTextWithCancelKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          user.language === UserLanguageEnum.EN
            ? `Enter the new ${data} for the payment method!`
            : user.language === UserLanguageEnum.UA
              ? `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ${data} –¥–ª—è —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏!`
              : `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${data} –¥–ª—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã!`,
          `AdminPaymentMethodDetails;${paymentMethodData.id}`,
          user,
          true,
        );
      }

      if (key === 'PaymentMethodIsPublished') {
        const redisData = await redisService.get(
          `EditPaymentMethodAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const paymentMethodData: UpdatePaymentMethodDto = JSON.parse(redisData);

        const paymentMethod = await paymentMethodService.update({
          ...paymentMethodData,
          is_published: data === 'true',
        });

        return await sendPaymentMethodAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethod,
          redisService,
          user,
          true,
        );
      }

      if (key === 'PaymentMethodCurrency') {
        const redisData = await redisService.get(
          `EditPaymentMethodAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const paymentMethodData: UpdatePaymentMethodDto = JSON.parse(redisData);

        const paymentMethod = await paymentMethodService.update({
          ...paymentMethodData,
          currency: data as CurrencyEnum,
        });

        return await sendPaymentMethodAdminDetailsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethod,
          redisService,
          user,
          true,
        );
      }

      if (key === 'AdminDeletePaymentMethod') {
        const redisData = await redisService.get(
          `EditPaymentMethodAdmin-${user.id}`,
        );
        await redisService.clearData(user.id);

        const paymentMethodData: UpdatePaymentMethodDto = JSON.parse(redisData);

        await paymentMethodService.remove(paymentMethodData.id);

        return await editPaymentMethodsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          paymentMethodService,
          user,
          true,
          false,
        );
      }

      if (key === 'PlanChannel') {
        const redisData = await redisService.get(
          `EditSubscriptionPlanAdmin-${user.id}`,
        );

        const planData: UpdatePlanDto = JSON.parse(redisData);

        const plan = await planService.findOne({ id: planData.id });

        if (plan.channels.find((c) => c.id === data)) {
          await planService.updateChannel({
            id: plan.id,
            channelId: data,
            add: false,
          });
        } else {
          await planService.updateChannel({
            id: plan.id,
            channelId: data,
            add: true,
          });
        }

        return await editSubscriptionPlanChannelsKeyboard(
          query.message.chat.id,
          query.message.message_id,
          bot,
          await planService.findOne({ id: plan.id }),
          channelService,
          user,
        );
      }

      if (key === 'PendingUsers') {
        await redisService.clearData(user.id);

        const { payments } = await paymentService.getPayments({
          statuses: [PaymentStatusEnum.Pending],
        });

        if (!payments.length) {
          return await bot.sendMessage(
            query.message.chat.id,
            user.language === UserLanguageEnum.EN
              ? `‚úÖ There are not pending users!`
              : user.language === UserLanguageEnum.UA
                ? `‚úÖ –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –Ω–∞ —Ä–æ–∑–≥–ª—è–¥!`
                : `‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`,
          );
        }

        return payments.map(async (payment) => {
          const plan = await planService.findOne({
            id: payment.subscription_plan_id,
          });

          const paymentMethod = await paymentMethodService.findOne({
            id: payment.payment_method_id,
          });

          let promocode = null;

          if (payment.promocode_id) {
            promocode = await promocodeService.findOne({
              id: payment.promocode_id,
            });
          }

          const customer = await userService.findOne({
            id: payment.user_id,
          });

          return await sendGiveUserAccessKeyboard(
            query.message.chat.id,
            bot,
            user,
            customer,
            payment,
            plan,
            paymentMethod,
            promocode,
          );
        });
      }

      if (key === 'GiveUserAccessConfirm') {
        await redisService.clearData(user.id);

        const payment = await paymentService.findOne({
          id: data,
          statuses: [PaymentStatusEnum.Pending],
        });

        if (!payment) {
          return await logService.create({
            action: 'callback_query',
            info: `GiveUserAccessConfirm no payment bug. data: ${data}`,
            type: LogTypeEnum.ERROR,
            bot: BotEnum.HESOYAM,
          });
        }

        const customer = await userService.findOne({
          id: payment.user_id,
        });

        await paymentService.update({
          id: payment.id,
          status: PaymentStatusEnum.Success,
          updated_by_id: user.id,
        });

        const adminsPaymentMessages: { message_id: number; chat_id: number }[] =
          JSON.parse(payment.admins_payment_messages);

        adminsPaymentMessages?.forEach(async (paymentMessage) => {
          await sendTransactionsKeyboard(
            paymentMessage.chat_id,
            paymentMessage.message_id,
            bot,
            customer,
            paymentService,
            true,
            user.language,
            true,
            true,
            user,
          );
        });

        const plan = await planService.findOne({
          id: payment.subscription_plan_id,
        });

        await sendEmail(
          customer.email,
          LaterTypeEnum.BuyPlan,
          customer.language,
          logService,
          BotEnum.HESOYAM,
          {
            plan: plan[`name${customer.language}`],
          },
        );

        await bot.sendMessage(
          customer.chat_id,
          customer.language === UserLanguageEnum.EN
            ? `‚úÖ The manager has confirmed your payment! Thank you for trusting us. Links will come in subsequent messages.

Attention, you must join all channels and chats within 24 hours after receiving the links!`
            : customer.language === UserLanguageEnum.UA
              ? `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –î—è–∫—É—î–º–æ —â–æ –¥–æ–≤—ñ—Ä–∏–ª–∏—Å—è –Ω–∞–º. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–π–¥—É—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.

–£–≤–∞–≥–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ —á–∞—Ç—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å!`
              : `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏—Å—å –Ω–∞–º. –°—Å—ã–ª–∫–∏ –ø—Ä–∏–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

–í–Ω–∏–º–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –∏ —á–∞—Ç–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫!`,
        );

        return await channelService.sendChannelsLinks(bot, customer);
      }

      if (key === 'GiveUserAccessDecline') {
        await redisService.clearData(user.id);

        const payment = await paymentService.findOne({
          id: data,
          statuses: [PaymentStatusEnum.Pending],
        });

        if (!payment) {
          return await logService.create({
            action: 'callback_query',
            info: `GiveUserAccessDecline no payment bug. data: ${data}`,
            type: LogTypeEnum.ERROR,
            bot: BotEnum.HESOYAM,
          });
        }

        const customer = await userService.findOne({
          id: payment.user_id,
        });

        await paymentService.update({
          id: data,
          status: PaymentStatusEnum.Cancel,
          updated_by_id: user.id,
        });

        const adminsPaymentMessages: { message_id: number; chat_id: number }[] =
          JSON.parse(payment.admins_payment_messages);

        adminsPaymentMessages.forEach(async (paymentMessage) => {
          await sendTransactionsKeyboard(
            paymentMessage.chat_id,
            paymentMessage.message_id,
            bot,
            customer,
            paymentService,
            true,
            user.language,
            true,
            false,
            user,
          );

          await bot.sendMessage(
            paymentMessage.chat_id,
            user.language === UserLanguageEnum.EN
              ? `‚ùå Payment by user @${customer.name} declined!`
              : user.language === UserLanguageEnum.UA
                ? `‚ùå –û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${customer.name} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @${user.name}!`
                : `‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${customer.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @${user.name}!`,
          );
        });

        const plan = await planService.findOne({
          id: payment.subscription_plan_id,
        });

        await sendEmail(
          customer.email,
          LaterTypeEnum.DeclineBuyPlan,
          customer.language,
          logService,
          BotEnum.HESOYAM,
          {
            plan: plan[`name${customer.language}`],
          },
        );

        return await bot.sendMessage(
          customer.chat_id,
          customer.language === UserLanguageEnum.EN
            ? `‚ùå The manager did not confirm your payment! Make sure that you paid the correct amount, entered the promotional code (if available), sent the correct screenshot, sent the screenshot to the payment method where you sent the funds. If you did something wrong, you can send the payment details again by going to "üóíÔ∏è Subscription plans", selecting the desired plan and clicking "üíµ I paid".

If you could not solve the problem, or you think that an error has occurred, contact support via the "ü§ù Support" button`
            : customer.language === UserLanguageEnum.UA
              ? `‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –≤–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É, –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ), –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∫—Ä—ñ—à–æ—Ç, –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Å–∫—Ä—ñ—à–æ—Ç –≤ —Ç–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∫–æ—à—Ç–∏. –Ø–∫—â–æ –≤–∏ —â–æ—Å—å –Ω–∞–¥—ñ–ª–∞–ª–∏ –Ω–µ –≤—ñ—Ä–Ω–æ, —Ç–æ –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –æ–ø–ª–∞—Ç—É –∑–Ω–æ–≤—É –ø–µ—Ä–µ–π—à–æ–≤—à–∏ –≤ "üóíÔ∏è –ü–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫", –æ–±—Ä–∞–≤—à–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø–ª–∞–Ω, —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ "üíµ –Ø –æ–ø–ª–∞—Ç–∏–≤".

–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É, –∞–±–æ –≤–≤–∞–∂–∞—î—Ç–µ —â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ –∫–Ω–æ–ø—Ü—ñ "ü§ù –î–æ–ø–æ–º–æ–≥–∞"`
              : `‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É, –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏), –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏—à–æ—Ç –≤ —Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã, –∫—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞. –ï—Å–ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –Ω–∞–¥–µ–ª–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π–¥—è –≤ "üóíÔ∏è –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫", –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–π –ø–ª–∞–Ω –∏ –Ω–∞–∂–∞–≤ "üíµ –Ø –æ–ø–ª–∞—Ç–∏–ª".

–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ "ü§ù –ü–æ–º–æ—â—å"`,
        );
      }
    } catch (e) {
      logService.create({
        action: 'callback_query',
        info: JSON.stringify(e.stack),
        type: LogTypeEnum.ERROR,
        bot: BotEnum.HESOYAM,
      });
    }
  });
};
