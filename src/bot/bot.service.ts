import { HttpStatus, Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import TelegramBot from 'node-telegram-bot-api';
import { telegramBot } from '../configs/telegram-bot.config';
import { RedisService } from '../redis/redis.service';
import { UserService } from '../user/user.service';
import {
  PayDataInterface,
  PaymentStatusEnum,
  UserLanguageEnum,
  errorHandler,
} from 'src/helper';
import { SubscriptionPlanService } from 'src/subscriptionPlan/subscriptionPlan.service';
import { PromocodeService } from 'src/promocode/promocode.service';
import { PaymentService } from 'src/payment/payment.service';
import { ChannelService } from 'src/chanel/channel.service';
import { User } from 'src/user/user.entity';
import { actionChannelPost } from './actions/channel_post.action';
import { actionMessage } from './actions/message.action';
import { actionCallbackQuery } from './actions/callback_query.action';
import { PaymentMethodService } from 'src/paymentMethod/paymentMethod.service';
import { ConversionRateService } from 'src/conversionRate/conversionRate.service';

@Injectable()
export class BotService {
  private bot: TelegramBot;

  constructor(
    private readonly configService: ConfigService,
    private userService: UserService,
    private redisService: RedisService,
    private planService: SubscriptionPlanService,
    private promocodeService: PromocodeService,
    private paymentService: PaymentService,
    private channelService: ChannelService,
    private paymentMethodService: PaymentMethodService,
    private rateService: ConversionRateService,
  ) {
    this.bot = telegramBot(configService);

    this.startBot();
  }

  async startBot() {
    actionChannelPost(this.bot, this.channelService);

    actionMessage(
      this.bot,
      this.userService,
      this.redisService,
      this.planService,
      this.promocodeService,
      this.paymentService,
      this.channelService,
      this.paymentMethodService,
      this.rateService,
    );

    actionCallbackQuery(
      this.bot,
      this.userService,
      this.redisService,
      this.planService,
      this.promocodeService,
      this.paymentService,
      this.channelService,
      this.paymentMethodService,
      this.rateService,
    );
  }

  async notifyUsers(users: User[], expiredDays: number) {
    return await Promise.all(
      users.map(async (user) => {
        const lastPayment = await this.paymentService.findOne({
          user_id: user.id,
          status: PaymentStatusEnum.Success,
        });

        const payData: PayDataInterface = {
          amount: lastPayment.subscription_plan.price,
          subscription_plan_id: lastPayment.subscription_plan_id,
          newPrice: lastPayment.price_usd,
          isContinue: true,
        };

        await this.redisService.add(
          `ContinueSubscription-${user.id}`,
          JSON.stringify(payData),
        );

        return this.bot.sendMessage(
          user.chat_id,
          user.language === UserLanguageEnum.EN
            ? `‚ÄºÔ∏è Your subscription expires in ${expiredDays} days!
You still have the option to renew your subscription at the old price.`
            : user.language === UserLanguageEnum.UA
              ? `‚ÄºÔ∏è –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ${expiredDays} –¥–Ω—ñ–≤!
–£ –≤–∞—Å —â–µ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ —Å—Ç–∞—Ä–æ—é —Ü—ñ–Ω–æ—é.`
              : `‚ÄºÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${expiredDays} –¥–Ω–µ–π!
–£ –≤–∞—Å –µ—â–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ.`,
          {
            reply_markup: {
              remove_keyboard: true,
              inline_keyboard: [
                [
                  {
                    text:
                      user.language === UserLanguageEnum.EN
                        ? 'Continue the subscription at the old price'
                        : user.language === UserLanguageEnum.UA
                          ? '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ —Å—Ç–∞—Ä–æ—é —Ü—ñ–Ω–æ—é'
                          : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ',
                    callback_data: 'ContinueSubscription',
                  },
                ],
              ],
            },
          },
        );
      }),
    );
  }

  async deleteExpiredUsers(users: User[]) {
    return await Promise.all(
      users.map(async (user) => {
        try {
          await this.channelService.deleteUserFromChannels(
            this.bot,
            user.chat_id,
          );

          return this.bot.sendMessage(
            user.chat_id,
            user.language === UserLanguageEnum.EN
              ? `‚ÄºÔ∏è Your subscription has expired! You have been removed from all channels.

If you could not solve the problem, or you think that an error has occurred, contact support via the "ü§ù Support" button`
              : user.language === UserLanguageEnum.UA
                ? `‚ÄºÔ∏è –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è! –í–∞—Å –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤.

–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É, –∞–±–æ –≤–≤–∞–∂–∞—î—Ç–µ —â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ –∫–Ω–æ–ø—Ü—ñ "ü§ù –î–æ–ø–æ–º–æ–≥–∞`
                : `‚ÄºÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫! –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤.

–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à—É—é –æ—à–∏–±–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ "ü§ù –ü–æ–º–æ—â—å`,
          );
        } catch (e) {
          errorHandler(
            'Failed deleteExpiredUsers',
            HttpStatus.INTERNAL_SERVER_ERROR,
            e,
          );
        }
      }),
    );
  }
}
