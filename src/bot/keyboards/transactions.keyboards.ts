import TelegramBot from 'node-telegram-bot-api';
import { PaymentStatusEnum, UserLanguageEnum } from 'src/helper';
import { Payment } from 'src/payment/payment.entity';
import { PaymentService } from 'src/payment/payment.service';
import { User } from 'src/user/user.entity';

export const sendTransactionsKeyboard = async (
  id: number,
  bot: TelegramBot,
  user: User,
  paymentService: PaymentService,
  isAdminPanel: boolean,
  language: UserLanguageEnum,
) => {
  const { payments, total } = await paymentService.getPayments({
    user_id: user.id,
  });

  let text;

  if (payments.length) {
    text = `üóÑÔ∏è ${getUserInfoText(language, isAdminPanel, user)} ${
      language === UserLanguageEnum.EN
        ? `had ${total} payments!

<b>List of payments:</b>`
        : language === UserLanguageEnum.UA
          ? `—î –ø–ª–∞—Ç–µ–∂—ñ–≤: ${total}!
  
<b>–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤:</b>`
          : `–µ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π: ${total}!

<b>–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:</b>`
    }`;

    payments.forEach((p) => {
      text = text + getPaymentInfoText(language, p, isAdminPanel);

      if (p.promocode) {
        text =
          text +
          `
<b>Promo code</b>: ${p.promocode.name}`;
      }
    });
  } else {
    text = `${getUserInfoText(
      language,
      isAdminPanel,
      user,
    )} ${getNoPaymentsInfoText(language)}`;
  }

  await bot.sendMessage(id, text, {
    parse_mode: 'HTML',
    reply_markup: {
      remove_keyboard: true,
      inline_keyboard: [
        [
          {
            text: `‚¨ÖÔ∏è ${
              language === UserLanguageEnum.EN
                ? 'Back'
                : language === UserLanguageEnum.UA
                  ? '–ù–∞–∑–∞–¥'
                  : '–ù–∞–∑–∞–¥'
            }`,
            callback_data: isAdminPanel ? 'AdminPanel' : 'MySubscription',
          },
        ],
      ],
    },
  });
};

export const editTransactionsKeyboard = async (
  chat_id: number,
  message_id: number,
  bot: TelegramBot,
  user: User,
  paymentService: PaymentService,
  isAdminPanel: boolean,
  language: UserLanguageEnum,
  isConfirmedPayment: boolean = null,
) => {
  const { payments, total } = await paymentService.getPayments({
    user_id: user.id,
  });

  let text = '';

  if (isConfirmedPayment) {
    text =
      text +
      `‚úÖ ${
        language === UserLanguageEnum.EN
          ? `Users @${user.name} payment confirmed successfully!

`
          : language === UserLanguageEnum.UA
            ? `–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${user.name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!

`
            : `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

`
      }`;
  } else if (isConfirmedPayment === false) {
    text =
      text +
      `‚úÖ ${
        language === UserLanguageEnum.EN
          ? `Payment by user @${user.name} declined!

`
          : language === UserLanguageEnum.UA
            ? `–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${user.name} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞!

`
            : `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!

`
      }`;
  }

  if (payments.length) {
    text =
      text +
      `üóÑÔ∏è ${getUserInfoText(language, isAdminPanel, user)} ${
        language === UserLanguageEnum.EN
          ? `had ${total} payments!

<b>List of payments:</b>`
          : language === UserLanguageEnum.UA
            ? `—î –ø–ª–∞—Ç–µ–∂—ñ–≤: ${total}!
  
<b>–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤:</b>`
            : `–µ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π: ${total}!

<b>–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:</b>`
      }`;

    payments.forEach((p) => {
      text = text + getPaymentInfoText(language, p, isAdminPanel);

      if (p.promocode) {
        text =
          text +
          `
<b>Promo code</b>: ${p.promocode.name}`;
      }
    });
  } else {
    text = `${getUserInfoText(
      language,
      isAdminPanel,
      user,
    )} ${getNoPaymentsInfoText(language)}`;
  }

  const inline_keyboard = [
    [
      {
        text: `‚¨ÖÔ∏è ${
          language === UserLanguageEnum.EN
            ? 'Back'
            : language === UserLanguageEnum.UA
              ? '–ù–∞–∑–∞–¥'
              : '–ù–∞–∑–∞–¥'
        }`,
        callback_data: isAdminPanel ? 'AdminPanel' : 'MySubscription',
      },
    ],
  ];

  await bot.editMessageText(text, {
    chat_id,
    message_id,
    parse_mode: 'HTML',
  });

  await bot.editMessageReplyMarkup(
    {
      inline_keyboard,
    },
    {
      chat_id,
      message_id,
    },
  );
};

const getPaymentInfoText = (
  language: UserLanguageEnum,
  p: Payment,
  isAdminPanel: boolean,
) => {
  switch (language) {
    case UserLanguageEnum.EN:
      return `

${
  p.status === PaymentStatusEnum.Success
    ? '‚úÖ'
    : p.status === PaymentStatusEnum.Cancel
      ? '‚ùå'
      : p.status === PaymentStatusEnum.End
        ? 'üóìÔ∏è'
        : 'ü§∑‚Äç‚ôÇÔ∏è'
} <b>Status:</b> ${getStatusText(language, p.status)}
  <b>Amount USD:</b> ${p.price_usd}$ 
  <b>Paid amount:</b> ${p.amount} ${p.currency}
  <b>Payment method:</b> ${p.payment_method.name}
  <b>Subscription plan:</b> ${p.subscription_plan[`name${language}`]}
  <b>Date:</b> ${p.created_date}
  <b>Expired date:</b> ${p.expired_date}${
    isAdminPanel
      ? `
<b>The manager checking the payment:</b> ${
          p.updated_by ? '@' + p.updated_by?.name : 'is still pending'
        }`
      : ''
  }`;

    case UserLanguageEnum.UA:
      return `

${
  p.status === PaymentStatusEnum.Success
    ? '‚úÖ'
    : p.status === PaymentStatusEnum.Cancel
      ? '‚ùå'
      : p.status === PaymentStatusEnum.End
        ? 'üóìÔ∏è'
        : 'ü§∑‚Äç‚ôÇÔ∏è'
} <b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusText(language, p.status)}
  <b>–°—É–º–∞ –≤ USD:</b> ${p.price_usd}$
  <b>–û–ø–ª–∞—á–µ–Ω–∞ —Å—É–º–∞:</b> ${p.amount} ${p.currency}
  <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:</b> ${p.payment_method.name}
  <b>–ü–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏:</b> ${p.subscription_plan[`name${language}`]}
  <b>–î–∞—Ç–∞:</b> ${p.created_date}
  <b>–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è:</b> ${p.expired_date}${
    isAdminPanel
      ? `
<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è–≤—à–∏–π –æ–ø–ª–∞—Ç—É:</b> ${
          p.updated_by ? '@' + p.updated_by?.name : '—â–µ –æ—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É'
        }`
      : ''
  }`;

    case UserLanguageEnum.RU:
      return `

${
  p.status === PaymentStatusEnum.Success
    ? '‚úÖ'
    : p.status === PaymentStatusEnum.Cancel
      ? '‚ùå'
      : p.status === PaymentStatusEnum.End
        ? 'üóìÔ∏è'
        : 'ü§∑‚Äç‚ôÇÔ∏è'
} <b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusText(language, p.status)}
  <b>–°—É–º–º–∞ –≤ USD:</b> ${p.price_usd}$
  <b>–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞:</b> ${p.amount} ${p.currency}
  <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b> ${p.payment_method.name}
  <b>–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b> ${p.subscription_plan[`name${language}`]}
  <b>–î–∞—Ç–∞:</b> ${p.created_date}
  <b>–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞:</b> ${p.expired_date}${
    isAdminPanel
      ? `
<b>–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–≤—à–∏–π –æ–ø–ª–∞—Ç—É:</b> ${
          p.updated_by ? '@' + p.updated_by?.name : '–µ—â–µ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'
        }`
      : ''
  }`;
  }
};

const getUserInfoText = (
  language: UserLanguageEnum,
  isAdminPanel: boolean,
  user: User,
) => {
  switch (language) {
    case UserLanguageEnum.EN:
      return isAdminPanel ? `User ${user.name}` : 'You';

    case UserLanguageEnum.UA:
      return isAdminPanel ? `–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.name}` : '–£ –≤–∞—Å';

    case UserLanguageEnum.RU:
      return isAdminPanel ? `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}` : '–£ –≤–∞—Å';
  }
};

const getNoPaymentsInfoText = (language: UserLanguageEnum) => {
  switch (language) {
    case UserLanguageEnum.EN:
      return `haven't payments yet.`;

    case UserLanguageEnum.UA:
      return `—â–µ –Ω–µ –º–∞—î –ø–ª–∞—Ç–µ–∂—ñ–≤.`;

    case UserLanguageEnum.RU:
      return `–µ—â–µ –Ω–µ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π.`;
  }
};

const getStatusText = (
  language: UserLanguageEnum,
  status: PaymentStatusEnum,
) => {
  switch (status) {
    case PaymentStatusEnum.Cancel:
      return language === UserLanguageEnum.EN
        ? 'payment has not been confirmed by the manager'
        : language === UserLanguageEnum.UA
          ? '–ø–ª–∞—Ç—ñ–∂ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
          : '–ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';

    case PaymentStatusEnum.Pending:
      return language === UserLanguageEnum.EN
        ? 'payment is still pending'
        : language === UserLanguageEnum.UA
          ? '–ø–ª–∞—Ç—ñ–∂ —â–µ –æ—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É'
          : '–ø–ª–∞—Ç–µ–∂ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è';

    case PaymentStatusEnum.Success:
      return language === UserLanguageEnum.EN
        ? 'payment is successful'
        : language === UserLanguageEnum.UA
          ? '–ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–∏–π'
          : '–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω';

    case PaymentStatusEnum.End:
      return language === UserLanguageEnum.EN
        ? 'The subscription for this payment has already expired'
        : language === UserLanguageEnum.UA
          ? '–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–æ —Ü—å–æ–º—É –ø–ª–∞—Ç–µ–∂—É –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
          : '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø–ª–∞—Ç–µ–∂—É —É–∂–µ –∏—Å—Ç–µ–∫';
  }
};
